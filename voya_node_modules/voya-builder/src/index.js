var RSVP = require('rsvp');
var async = require('async');
var fs = require('fs-extra');
var c = require('./constants.js');
var path = require('path');
require('colors');

var queue = require('./streams/queue.js');

/**
 * Builds the app using jspm.Builder
 *
 * @param {Object}          config
 * @param {Object}          config.mainBundles      main, manually defined bundles
 * @param {Array<String>}   config.autoBundles      array of dirs to automatically bundle
 * @param {String}          config.base             destination base
 * @param {String}          config.bundleDest       bundle destination
 * @param {String}          config.configDest       bundle config file destination
 * @param {Number=5}        config.concurrency      number of builds to run at the same time
 * @param {String}          config.cacheBust        splices this string into all bundle names
 * @param {Boolean=false}   config.sourceMaps       if true, builds source maps for all bundles
 * @param {Boolean=false}   config.minify           if true, builds will be minified
 *
 * @param {Jspm}            jspm                    must be project's local jspm
 *
 * @returns {RSVP.Promise}
 */
function voyaBuilder(config, jspm) {
    // todo this is just sloppy... use extend
    config.jspm = jspm;
    config.concurrency = config.concurrency || 5;
    config.sourceMaps = config.sourceMaps || false;
    config.minify = config.minify || false;

    return new RSVP.Promise(function (resolve, reject) {
        async.auto({
            cleanDest: function (done) {
                console.log('cleaning destination folder');
                var dest = path.resolve(config.base, config.bundleDest);
                var stats = fs.existsSync(dest);
                if (stats) {
                    fs.removeSync(dest);
                }
                done(null);
            },
            getAutoBundles: ['getGlobalExcludes', function (done, results) {
                async.concat(config.autoBundles, fs.readdir, function (err, modules) {
                    //console.log(" Noticed  ".green.bold, modules.length.toString().bold, "auto bundles");
                    done(null, modules.map(function (moduleCfg) {
                        return {
                            name: moduleCfg,
                            // todo this should not hardcode to index 0...
                            includes: [path.join(config.autoBundles[0], moduleCfg, moduleCfg)],
                            excludes: results.getGlobalExcludes
                        }
                    }));
                })
            }],
            getMainBundles: function (done) {
                var bundles = [];
                for (var bundleName in config.mainBundles) {
                    if (config.mainBundles.hasOwnProperty(bundleName)) {
                        var bundleCfg = config.mainBundles[bundleName];
                        bundleCfg.name = bundleName;
                        bundles.push(bundleCfg);
                    }
                }
                //console.log(" Noticed  ".green.bold, bundles.length.toString().bold, "main bundles");
                done(null, bundles);
            },
            getGlobalExcludes: ['getMainBundles', function (done, results) {
                done(null, results.getMainBundles
                        .reduce(function (excludes, bundleCfg) {
                            return excludes.concat(bundleCfg.includes);
                        }, [])
                );
            }],
            buildAll: ['cleanDest', 'getMainBundles', 'getAutoBundles', function (done, results) {
                var allBundles = ([]).concat(results.getMainBundles, results.getAutoBundles);

                var queue$ = queue(config);
                queue$.push(allBundles);
                queue$.drain = function () {
                    done(null, results);
                }
            }]
        }, function(err, results) {
            if (err) { reject(err); }

            console.log(c.S_DONE, "All bundles created!");
            resolve(results.buildAll);
        });
    });
}

module.exports = voyaBuilder;
