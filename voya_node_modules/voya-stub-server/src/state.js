'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _libAsyncApply = require('./lib/async-apply');

var _libAsyncApply2 = _interopRequireDefault(_libAsyncApply);

var _libIsEmpty = require('./lib/is-empty');

var _libIsEmpty2 = _interopRequireDefault(_libIsEmpty);

var _extend = require('extend');

var _extend2 = _interopRequireDefault(_extend);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _libConstants = require('./lib/constants');

var _libGetRoutes = require('./lib/get-routes');

var _libGetRoutes2 = _interopRequireDefault(_libGetRoutes);

var _libPickDefaultStub = require('./lib/pick-default-stub');

var _libPickDefaultStub2 = _interopRequireDefault(_libPickDefaultStub);

var DEFAULT_ENVIRONMENT = 'local.json';

var state = {
    routes: {},
    presets: {},
    environments: {},

    activeStubs: {},
    activePreset: null,
    activeEnvironment: DEFAULT_ENVIRONMENT,

    saveRemoteStubsAs: 'remote'
};

/**
 * @callback nodeCallback
 * @param error
 * @param result
 */

var State = (function () {
    function State() {
        _classCallCheck(this, State);
    }

    _createClass(State, [{
        key: 'ensurePaths',

        /**
         * ensures that all required paths exist
         */
        value: function ensurePaths() {
            return _regeneratorRuntime.async(function ensurePaths$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_mkdirp2['default'], _libConstants.PRESET_PATH));

                    case 2:
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_mkdirp2['default'], _libConstants.ENVIRONMENT_PATH));

                    case 4:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * gets all routes in the stub directory
         * @method getRoutes
         * @param {Boolean} reload
         */
    }, {
        key: 'getRoutes',
        value: function getRoutes(reload) {
            return _regeneratorRuntime.async(function getRoutes$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!((0, _libIsEmpty2['default'])(state.routes) || reload === true)) {
                            context$2$0.next = 4;
                            break;
                        }

                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap((0, _libGetRoutes2['default'])());

                    case 3:
                        state.routes = context$2$0.sent;

                    case 4:
                        return context$2$0.abrupt('return', state.routes);

                    case 5:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * gets all presets in the presets directory
         */
    }, {
        key: 'getPresets',
        value: function getPresets() {
            var files, presets, i, file;
            return _regeneratorRuntime.async(function getPresets$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readdir, _libConstants.PRESET_PATH));

                    case 2:
                        files = context$2$0.sent;
                        presets = {};
                        i = 0;

                    case 5:
                        if (!(i < files.length)) {
                            context$2$0.next = 13;
                            break;
                        }

                        context$2$0.next = 8;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readFile, _path2['default'].join(_libConstants.PRESET_PATH, files[i])));

                    case 8:
                        file = context$2$0.sent;

                        presets[files[i]] = JSON.parse(file.toString());

                    case 10:
                        i++;
                        context$2$0.next = 5;
                        break;

                    case 13:
                        return context$2$0.abrupt('return', state.presets = presets);

                    case 14:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * gets all environments in the environments directory
         */
    }, {
        key: 'getEnvironments',
        value: function getEnvironments() {
            var files, environments, i, file;
            return _regeneratorRuntime.async(function getEnvironments$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readdir, _libConstants.ENVIRONMENT_PATH));

                    case 2:
                        files = context$2$0.sent;
                        environments = {};
                        i = 0;

                    case 5:
                        if (!(i < files.length)) {
                            context$2$0.next = 13;
                            break;
                        }

                        context$2$0.next = 8;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readFile, _path2['default'].join(_libConstants.ENVIRONMENT_PATH, files[i])));

                    case 8:
                        file = context$2$0.sent;

                        environments[files[i]] = JSON.parse(file.toString());

                    case 10:
                        i++;
                        context$2$0.next = 5;
                        break;

                    case 13:

                        //default if no environments are defined
                        if (!environments[DEFAULT_ENVIRONMENT]) {
                            environments[DEFAULT_ENVIRONMENT] = [];
                        }

                        // environments.sort(function(a,b){
                        //     return sortOrder.indexOf(a) - sortOrder.indexOf(b);
                        // })
                        return context$2$0.abrupt('return', state.environments = environments);

                    case 15:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method getStub
         * @param url
         * @param method
         */
    }, {
        key: 'getStub',
        value: function getStub(url, method) {
            var route, active, json, res;
            return _regeneratorRuntime.async(function getStub$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        route = [url, method].join('/');
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.getActiveStub(route));

                    case 3:
                        active = context$2$0.sent;
                        context$2$0.next = 6;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readFile, _path2['default'].join(_libConstants.STUB_PATH, route, active)));

                    case 6:
                        json = context$2$0.sent;
                        res = JSON.parse(json.toString());
                        return context$2$0.abrupt('return', res);

                    case 9:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method getActiveStub
         * @param route
         */
    }, {
        key: 'getActiveStub',
        value: function getActiveStub(route) {
            var routes;
            return _regeneratorRuntime.async(function getActiveStub$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!state.activeStubs[route]) {
                            context$2$0.next = 4;
                            break;
                        }

                        return context$2$0.abrupt('return', state.activeStubs[route]);

                    case 4:
                        context$2$0.next = 6;
                        return _regeneratorRuntime.awrap(this.getRoutes(false));

                    case 6:
                        routes = context$2$0.sent;

                        if (routes[route]) {
                            context$2$0.next = 9;
                            break;
                        }

                        throw new Error('Route ' + route + ' not found');

                    case 9:
                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(this.setActiveStub(route, (0, _libPickDefaultStub2['default'])(routes[route])));

                    case 11:
                        return context$2$0.abrupt('return', state.activeStubs[route]);

                    case 12:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method getActiveEnvironment
         * @param route
         */
    }, {
        key: 'getActiveEnvironment',
        value: function getActiveEnvironment() {
            return _regeneratorRuntime.async(function getActiveEnvironment$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        return context$2$0.abrupt('return', state.activeEnvironment);

                    case 1:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method getActiveEnvironmentConfig
         * @param route
         */
    }, {
        key: 'getActiveEnvironmentConfig',
        value: function getActiveEnvironmentConfig() {
            return _regeneratorRuntime.async(function getActiveEnvironmentConfig$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap(this.getEnvironments());

                    case 2:
                        return context$2$0.abrupt('return', state.environments[state.activeEnvironment]);

                    case 3:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method setActiveStub
         * @param route
         * @param stub
         */
    }, {
        key: 'setActiveStub',
        value: function setActiveStub(route, stub) {
            return _regeneratorRuntime.async(function setActiveStub$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        state.activeStubs[route] = stub;
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.saveState());

                    case 3:
                        return context$2$0.abrupt('return', state.activeStubs[route]);

                    case 4:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method loadState
         */
    }, {
        key: 'loadState',
        value: function loadState() {
            var json;
            return _regeneratorRuntime.async(function loadState$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.prev = 0;
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].readFile, _libConstants.STATE_PATH));

                    case 3:
                        json = context$2$0.sent;

                        (0, _extend2['default'])(state, JSON.parse(json));
                        return context$2$0.abrupt('return', json);

                    case 8:
                        context$2$0.prev = 8;
                        context$2$0.t0 = context$2$0['catch'](0);

                        console.log('no state file, creating');
                        context$2$0.next = 13;
                        return _regeneratorRuntime.awrap(this.saveState());

                    case 13:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[0, 8]]);
        }

        /**
         * @method saveState
         */
    }, {
        key: 'saveState',
        value: function saveState() {
            var json;
            return _regeneratorRuntime.async(function saveState$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        json = JSON.stringify({
                            activeStubs: state.activeStubs,
                            activePreset: state.activePreset,
                            activeEnvironment: state.activeEnvironment
                        });
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].writeFile, _libConstants.STATE_PATH, json));

                    case 3:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method createPreset
         * @param name
         */
    }, {
        key: 'createPreset',
        value: function createPreset(name) {
            var dest, config;
            return _regeneratorRuntime.async(function createPreset$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        dest = _path2['default'].join(_libConstants.PRESET_PATH, name + '.json');
                        config = state.activeStubs;
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap((0, _libAsyncApply2['default'])(_fs2['default'].writeFile, dest, JSON.stringify(config, null, '  ')));

                    case 4:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method setPreset
         * @param name
         */
    }, {
        key: 'setPreset',
        value: function setPreset(name) {
            return _regeneratorRuntime.async(function setPreset$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        state.activePreset = name;
                        if (state.presets[name]) {
                            // extend the current state
                            // in the future, presets should be diffs of the defaults
                            _Object$assign(state.activeStubs, state.presets[name]);
                        }
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this.saveState());

                    case 4:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method setEnvironment
         * @param name
         */
    }, {
        key: 'setEnvironment',
        value: function setEnvironment(name) {
            return _regeneratorRuntime.async(function setEnvironment$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        state.activeEnvironment = name;
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.saveState());

                    case 3:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /**
         * @method reset
         */
    }, {
        key: 'reset',
        value: function reset() {
            return _regeneratorRuntime.async(function reset$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap(this.setPreset(null));

                    case 2:
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this.setEnvironment(DEFAULT_ENVIRONMENT));

                    case 4:
                        state.activeStubs = {};
                        context$2$0.next = 7;
                        return _regeneratorRuntime.awrap(this.saveState());

                    case 7:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'saveRemoteStubsAs',

        /**
         * gets saveRemoveResponses option
         */
        get: function get() {
            return state.saveRemoteStubsAs;
        }
    }]);

    return State;
})();

exports['default'] = new State();
module.exports = exports['default'];

//var sortOrder = ['local','unit','intg','accp'];

// no stub has been selected
// select the first stub and set it
// then return recursively