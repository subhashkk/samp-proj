'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

require('colors');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _extend = require('extend');

var _extend2 = _interopRequireDefault(_extend);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _controllersServices = require('./controllers/services');

var _controllersServices2 = _interopRequireDefault(_controllersServices);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _httpProxyMiddleware = require('http-proxy-middleware');

var _httpProxyMiddleware2 = _interopRequireDefault(_httpProxyMiddleware);

var _libSaveRemoteStub = require('./lib/save-remote-stub');

var _libSaveRemoteStub2 = _interopRequireDefault(_libSaveRemoteStub);

var _libConstants = require('./lib/constants');

var defaultConfig = {
    // Port to run the server on
    port: 9000,
    // Static paths to serve
    paths: []
};

/**
 * @param config
 * @param {Number}          config.port     the port to run the server on
 * @param {Array<String>}   config.paths    the paths to serve
 * @returns {Promise}
 */
function server(config) {
    var server = (0, _express2['default'])();

    config = (0, _extend2['default'])(defaultConfig, config);

    /* set view path and renderer  */
    server.set('view engine', 'jade');
    server.set('views', _path2['default'].join(__dirname, 'views/'));

    /* process post requests */
    server.use(_bodyParser2['default'].json());
    server.use(_bodyParser2['default'].urlencoded({ extended: true }));

    /* App server */
    config.paths.forEach(function (p) {
        server.use(_express2['default']['static'](_path2['default'].resolve(p)));
    });

    /* Services UI */
    server.use('/services', _controllersServices2['default']);
    server.use('/services/static', _express2['default']['static'](_path2['default'].join(__dirname, 'static')));

    /* Proxies & Stubs */
    _state2['default'].getActiveEnvironmentConfig().then(function (paths) {
        paths.forEach(function (p) {
            server.use((0, _httpProxyMiddleware2['default'])(p.path, {
                target: p.target,
                secure: false,
                onProxyRes: function onProxyRes(proxyRes /*, req, res*/) {
                    if (_state2['default'].saveRemoteStubsAs) {
                        (0, _libSaveRemoteStub2['default'])(proxyRes);
                    }
                }
            }));
        });

        /* default...for stubs - doing this within then() because order matters  */
        server.use(function (req, res, next) {
            _state2['default'].getStub(_url2['default'].parse(req.url).pathname, req.method).then(function (stub) {
                // An HTTP status code can be defined in the json
                res.status(stub['@@HTTP_STATUS'] || 200);
                // It is removed before serving
                stub['@@HTTP_STATUS'] = undefined;

                res.setHeader('Content-Type', 'application/json');
                res.send(JSON.stringify(stub, null, '  '));
                next();
            })['catch'](function () {
                res.status(404).render('404');
                next();
            });
        });
    });

    /* Run the server */
    return new _Promise(function (resolve, reject) {
        _state2['default'].ensurePaths().then(function () {
            _state2['default'].loadState();
        }).then(function () {
            // Watch fs and
            // Refresh routes on add file
            _chokidar2['default'].watch(_libConstants.STUB_PATH).on('add', _state2['default'].getRoutes.bind(_state2['default'], true));

            // Start listening
            var _server = server.listen(config.port, function () {
                resolve(_server);
            });
        })['catch'](reject);
    });
}

exports['default'] = function (config) {
    return server(config).then(function (serverInstance) {

        _controllersServices2['default'].on('ui:restart', function () {
            console.log('restarting server...');
            serverInstance.close();
            serverInstance = server(config);
            console.log('restart complete');
        });
    });
};

module.exports = exports['default'];