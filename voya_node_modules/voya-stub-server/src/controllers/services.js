'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _stateJs = require('../state.js');

var _stateJs2 = _interopRequireDefault(_stateJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var services = (0, _express2['default'])();

/* set view path and renderer  */
services.set('view engine', 'jade');
services.set('views', _path2['default'].join(__dirname, '../views/'));

services.get('/', function (req, res) {
    (function callee$1$0() {
        var routes, presets, environments, activeEnvironment;
        return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    context$2$0.next = 2;
                    return _regeneratorRuntime.awrap(_stateJs2['default'].getRoutes());

                case 2:
                    routes = context$2$0.sent;
                    context$2$0.next = 5;
                    return _regeneratorRuntime.awrap(_stateJs2['default'].getPresets());

                case 5:
                    presets = context$2$0.sent;
                    context$2$0.next = 8;
                    return _regeneratorRuntime.awrap(_stateJs2['default'].getEnvironments());

                case 8:
                    environments = context$2$0.sent;
                    context$2$0.next = 11;
                    return _regeneratorRuntime.awrap(_stateJs2['default'].getActiveEnvironment());

                case 11:
                    activeEnvironment = context$2$0.sent;
                    context$2$0.next = 14;
                    return _regeneratorRuntime.awrap(splitRoutes(routes));

                case 14:
                    routes = context$2$0.sent;

                    res.render('index', { routes: routes, presets: presets, environments: environments, activeEnvironment: activeEnvironment });

                case 16:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    })()['catch'](function (err) {
        throw err;
    });
});

services.get('/setRoute', function (req, res) {
    _stateJs2['default'].setActiveStub(req.query.route, req.query.stub).then(function () {
        res.redirect('/services/');
    })['catch'](function (err) {
        throw err;
    });
});

services.get('/setPreset', function (req, res) {
    _stateJs2['default'].setPreset(req.query.name).then(function () {
        res.redirect('/services/');
    })['catch'](function (err) {
        throw err;
    });
});

services.get('/setEnvironment', function (req, res) {
    _stateJs2['default'].setEnvironment(req.query.name).then(function () {
        res.redirect('/services/');
        services.emit('ui:restart');
    })['catch'](function (err) {
        throw err;
    });
});

services.get('/reset', function (req, res) {
    _stateJs2['default'].reset().then(function () {
        res.redirect('/services/');
    })['catch'](function (err) {
        throw err;
    });
});

services.post('/createPreset', function (req, res) {
    _stateJs2['default'].createPreset(req.body.name).then(function () {
        res.redirect('/services/');
    })['catch'](function (err) {
        throw err;
    });
});

function splitRoutes(routes) {
    var res, key, _key$split, _key$split2, newRoute, method;

    return _regeneratorRuntime.async(function splitRoutes$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                res = {};
                context$1$0.t0 = _regeneratorRuntime.keys(routes);

            case 2:
                if ((context$1$0.t1 = context$1$0.t0()).done) {
                    context$1$0.next = 17;
                    break;
                }

                key = context$1$0.t1.value;

                if (!routes.hasOwnProperty(key)) {
                    context$1$0.next = 15;
                    break;
                }

                _key$split = key.split(/\/(GET|POST)$/);
                _key$split2 = _slicedToArray(_key$split, 2);
                newRoute = _key$split2[0];
                method = _key$split2[1];

                res[newRoute] = res[newRoute] || {};
                context$1$0.t2 = routes[key];
                context$1$0.next = 13;
                return _regeneratorRuntime.awrap(_stateJs2['default'].getActiveStub(key));

            case 13:
                context$1$0.t3 = context$1$0.sent;
                res[newRoute][method] = {
                    stubs: context$1$0.t2,
                    active: context$1$0.t3
                };

            case 15:
                context$1$0.next = 2;
                break;

            case 17:
                return context$1$0.abrupt('return', res);

            case 18:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

exports['default'] = services;
module.exports = exports['default'];